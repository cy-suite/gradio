name: Deploy PR to Spaces

on:
  workflow_run:
    workflows: [Build PRasd Artifacts]
    types:
      - completed

jobs:
  comment-spaces-start:
    uses: "./.github/workflows/comment-queue.yml"
    secrets:
      gh_token: ${{ secrets.COMMENT_TOKEN }}
    with:
      pr_number: ${{ github.event.pull_request.number }}
      message: spaces~pending~null
  build_pr:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    - name: Install pnpm
      uses: pnpm/action-setup@v2
      with:
        version: 8.15
    - uses: actions/setup-node@v4
      with:
        node-version: 18
        cache: pnpm
        cache-dependency-path: pnpm-lock.yaml
    - name: Install pip
      run: python -m pip install build requests
    - name: Get PR Number
      id: get_pr_number
      run: |
        if ${{ github.event_name == 'pull_request' }}; then
          echo "GRADIO_VERSION=$(python -c 'import requests;print(requests.get("https://pypi.org/pypi/gradio/json").json()["info"]["version"])')" >> $GITHUB_OUTPUT
          python -c "import os;print(os.environ['GITHUB_REF'].split('/')[2])" > pr_number.txt
          echo "PR_NUMBER=$(cat pr_number.txt)" >> $GITHUB_OUTPUT
        else 
          echo "GRADIO_VERSION=$(python -c 'import json; print(json.load(open("gradio/package.json"))["version"])')" >> $GITHUB_OUTPUT
          echo "PR_NUMBER='main'" >> $GITHUB_OUTPUT
        fi
    - name: Build pr package
      run: |
        python -c 'import json; j = json.load(open("gradio/package.json")); j["version"] = "${{ steps.get_pr_number.outputs.GRADIO_VERSION }}"; json.dump(j, open("gradio/package.json", "w"))'
        pnpm i --frozen-lockfile --ignore-scripts
        pnpm build
        python3 -m build -w
      env:
        NODE_OPTIONS: --max_old_space_size=8192
    - name: Upload wheel
      uses: actions/upload-artifact@v4
      with:
        name: gradio-${{ steps.get_pr_number.outputs.GRADIO_VERSION }}-py3-none-any.whl
        path: dist/gradio-${{ steps.get_pr_number.outputs.GRADIO_VERSION }}-py3-none-any.whl
    - name: Set up Demos
      run: |
        python scripts/copy_demos.py https://gradio-builds.s3.amazonaws.com/${{ github.sha }}/gradio-${{ steps.get_pr_number.outputs.GRADIO_VERSION }}-py3-none-any.whl \
        "gradio-client @ git+https://github.com/gradio-app/gradio@${{ github.sha }}#subdirectory=client/python"
    - name: Upload all_demos
      uses: actions/upload-artifact@v4
      with:
        name: all_demos
        path: demo/all_demos
    - name: Create metadata artifact
      run: |
        python -c "import json; json.dump({'gh_sha': '${{ github.sha }}', 'pr_number': ${{ steps.get_pr_number.outputs.pr_number }}, 'version': '${{ steps.get_pr_number.outputs.GRADIO_VERSION }}', 'wheel': 'gradio-${{ steps.get_pr_number.outputs.GRADIO_VERSION }}-py3-none-any.whl'},  open('metadata.json', 'w'))"
    - name: Upload metadata
      uses: actions/upload-artifact@v4
      with:
        name: metadata.json
        path: metadata.json
  deploy-current-pr:
    outputs:
      pr_number: ${{ steps.set-outputs.outputs.pr_number }}
      space_url: ${{ steps.upload-demo.outputs.SPACE_URL }}
      sha: ${{ steps.set-outputs.outputs.gh_sha }}
      gradio_version: ${{ steps.set-outputs.outputs.gradio_version }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
    - name: Install pip
      run: python -m pip install build requests
    - name: Download metadata
      run: python scripts/download_artifacts.py ${{github.event.workflow_run.id }} metadata.json ${{ secrets.COMMENT_TOKEN }} --owner ${{ github.repository_owner }}
    - run: unzip metadata.json.zip
    - name: set outputs
      id: set-outputs
      run: |
        echo "wheel_name=$(python -c 'import json; print(json.load(open("metadata.json"))["wheel"])')" >> $GITHUB_OUTPUT
        echo "gh_sha=$(python -c 'import json; print(json.load(open("metadata.json"))["gh_sha"])')" >> $GITHUB_OUTPUT
        echo "gradio_version=$(python -c 'import json; print(json.load(open("metadata.json"))["version"])')" >> $GITHUB_OUTPUT
        echo "pr_number=$(python -c 'import json; print(json.load(open("metadata.json"))["pr_number"])')" >> $GITHUB_OUTPUT
    - name: 'Download wheel'
      run: python scripts/download_artifacts.py ${{ github.event.workflow_run.id }} ${{ steps.set-outputs.outputs.wheel_name }} ${{ secrets.COMMENT_TOKEN }} --owner ${{ github.repository_owner }}
    - run: unzip ${{ steps.set-outputs.outputs.wheel_name }}.zip
    - name: Upload wheel
      run: |
        export AWS_ACCESS_KEY_ID=${{ secrets.PR_DEPLOY_KEY }}
        export AWS_SECRET_ACCESS_KEY=${{ secrets.PR_DEPLOY_SECRET }}
        export AWS_DEFAULT_REGION=us-east-1
        aws s3 cp ${{ steps.set-outputs.outputs.wheel_name }} s3://gradio-builds/${{ steps.set-outputs.outputs.gh_sha  }}/
    - name: Install Hub Client Library
      run: pip install huggingface-hub
    - name: 'Download all_demos'
      run: python scripts/download_artifacts.py ${{ github.event.workflow_run.id }} all_demos  ${{ secrets.COMMENT_TOKEN }} --owner ${{ github.repository_owner }}
    - run: unzip all_demos.zip -d all_demos
    - run: cp -R all_demos/* demo/all_demos
    - name: Upload demo to spaces
      if: github.event.workflow_run.event == 'pull_request'
      id: upload-demo
      run: |
        python scripts/upload_demo_to_space.py all_demos \
        gradio-pr-deploys/pr-${{ steps.set-outputs.outputs.pr_number }}-all-demos \
        ${{ secrets.SPACES_DEPLOY_TOKEN }} \
        --gradio-version ${{ steps.set-outputs.outputs.gradio_version }} > url.txt
        echo "SPACE_URL=$(cat url.txt)" >> $GITHUB_OUTPUT
    - name: Upload Website Demos
      if: >
        github.event.workflow_run.event == 'workflow_dispatch' &&
        github.event.workflow_run.conclusion == 'success'
      id: upload-website-demos
      run: |
        python scripts/upload_website_demos.py --AUTH_TOKEN ${{ secrets.WEBSITE_SPACES_DEPLOY_TOKEN }} \
        --WHEEL_URL https://gradio-builds.s3.amazonaws.com/${{ steps.set-outputs.outputs.gh_sha }}/ \
        --GRADIO_VERSION ${{ steps.set-outputs.outputs.gradio_version }}

  comment-spaces-success:
    uses: "./.github/workflows/comment-queue.yml"
    needs: [deploy-current-pr]
    if: >
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success' &&
      needs.deploy-current-pr.result == 'success'
    secrets:
      gh_token: ${{ secrets.COMMENT_TOKEN }}
    with:
      pr_number: ${{ needs.deploy-current-pr.outputs.pr_number }}
      message: spaces~success~${{ needs.deploy-current-pr.outputs.space_url }}
      additional_text: |
        **Install Gradio from this PR**
        ```bash
        pip install https://gradio-builds.s3.amazonaws.com/${{ needs.deploy-current-pr.outputs.sha }}/gradio-${{ needs.deploy-current-pr.outputs.gradio_version }}-py3-none-any.whl
        ```

        **Install Gradio Python Client from this PR**
        ```bash
        pip install "gradio-client @ git+https://github.com/gradio-app/gradio@${{ needs.deploy-current-pr.outputs.sha }}#subdirectory=client/python"
        ```
  comment-spaces-failure:
    uses: "./.github/workflows/comment-queue.yml"
    needs: [deploy-current-pr]
    if: always() && needs.deploy-current-pr.result == 'failure'
    secrets:
      gh_token: ${{ secrets.COMMENT_TOKEN }}
    with:
      pr_number: ${{ needs.deploy-current-pr.outputs.pr_number }}
      message: spaces~failure~https://github.com/gradio-app/gradio/actions/runs/${{github.run_id}}/
