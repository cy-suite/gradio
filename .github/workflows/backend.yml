name: gradio-backend

on:
  push:
    branches:
      - "main"
  pull_request:

concurrency:
  group: backend-${{ github.ref }}-${{ github.event_name == 'push' || github.event.inputs.fire != null }}
  cancel-in-progress: true

env:
  NODE_OPTIONS: "--max-old-space-size=4096"

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      python-client: ${{ steps.changes.outputs.python-client }}
      gradio: ${{ steps.changes.outputs.gradio }}
      test: ${{ steps.changes.outputs.test }}
      workflows: ${{ steps.changes.outputs.workflows }}
      scripts: ${{ steps.changes.outputs.scripts }}
      client-scripts: ${{ steps.changes.outputs.client-scripts }}
    steps:
    - uses: actions/checkout@v3
    - uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          python-client:
            - 'client/python/**'
          gradio:
            - 'gradio/**'
          test:
            - 'test/**'
          workflows:
            - '.github/**'
          scripts:
            - 'scripts/**'
  client-lint:
    needs: changes
    if: needs.changes.outputs.python-client == 'true' ||  needs.changes.outputs.workflows == 'true'
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: client/python
    steps:
    - uses: actions/checkout@v3
    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.8"
    - uses: actions/cache@master
      id: cache
      with:
        path: ${{ env.pythonLocation}}/lib/python3.8/site-packages/*
        key: python-client-${{ runner.os }}-pip-${{ hashFiles('client/python/requirements.txt') }}-${{ hashFiles('client/python/test/requirements.txt') }}
        restore-keys: |
          python-client-${{ runner.os }}-pip-
          python-client-${{ runner.os }}-
    - name: Install Lint deps Client
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        pip install -e .
        pip install -r test/requirements.txt
    - name: Install Client
      run: |
        pip install -e .
    - name: Lint
      run: bash scripts/lint.sh
  client-test:
    needs: [client-lint]
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
        test-type: ["not flaky", "flaky"]
        python-version: ["3.8"]
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.test-type == 'flaky' }}
    defaults:
      run:
        working-directory: client/python
    steps:
    - uses: actions/checkout@v3
    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/cache@master
      id: cache
      with:
        path: ${{ env.pythonLocation}}/lib/python3.8/site-packages/*
        key: python-client-${{ runner.os }}-pip-${{ hashFiles('client/python/requirements.txt') }}-${{ hashFiles('client/python/test/requirements.txt') }}
        restore-keys: |
          python-client-${{ runner.os }}-pip-
          python-client-${{ runner.os }}-
    - name: Install Test Requirements
      if: steps.cache.outputs.cache-hit != 'true'
      run: |
        pip install -r test/requirements.txt
    - name: Install Client Library
      run: |
        pip install -e .
    - name: Tests
      shell: bash
      run: |
        python -m pytest -m "${{ matrix.test-type }}"
  lint:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.gradio == 'true'  || needs.changes.outputs.python-client == 'true' || needs.changes.outputs.workflows == 'true' ||  needs.changes.outputs.scripts == 'true' || needs.changes.outputs.test == 'true'
    steps:
      - uses: actions/checkout@v3
      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
      - uses: actions/cache@master
        id: cache
        with:
          path: ${{ env.pythonLocation}}/lib/python3.8/site-packages/*
          key: gradio-${{ runner.os }}-pip-${{ hashFiles('client/python/requirements.txt') }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('test/requirements.txt') }}
          restore-keys: |
            gradio-${{ runner.os }}-pip-
            gradio-${{ runner.os }}-
      - name: Install Test Dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: pip install -e . -r test/requirements.txt
      - name: Lint
        run: bash scripts/lint_backend.sh
      - name: Typecheck
        run: bash scripts/type_check_backend.sh
  test:
    needs: [lint]
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
        test-type: ["not flaky", "flaky"]
        python-version: ["3.8"]
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.test-type == 'flaky' }}
    steps:
    - uses: actions/checkout@v3
    - name: Install Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - uses: actions/cache@master
      id: cache
      with:
        path: ${{ env.pythonLocation}}/lib/python${{ matrix.python-version }}/site-packages/*
        key: gradio-${{ runner.os }}-pip-${{ hashFiles('client/python/requirements.txt') }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('test/requirements.txt') }}
        restore-keys: |
          gradio-${{ runner.os }}-pip-
          gradio-${{ runner.os }}-
    - name: Install pnpm
      if: steps.cache.outputs.cache-hit != 'true'
      uses: pnpm/action-setup@v2
      with:
        version: 8
    - uses: actions/setup-node@v3
      if: steps.cache.outputs.cache-hit != 'true'
      with:
        node-version: 18
        cache: pnpm
        cache-dependency-path: pnpm-lock.yaml
    - name: Install Gradio
      shell: bash
      run: |
        pip install -e .
    - name: Install 3.8 Test Dependencies
      if: steps.cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        pip install -r test/requirements.txt
    - name: Build frontend
      if: steps.cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        pnpm i --frozen-lockfile
        pnpm build
    - name: Install ffmpeg
      uses: FedericoCarboni/setup-ffmpeg@v2
    - name: Run tests
      shell: bash
      run: |
        mkdir -p test-reports
        python -m coverage run -m pytest -m "${{ matrix.test-type }}" --ignore=client
        python -m coverage xml
