name: gradio-backend

on:
  push:
    branches:
      - "main"
  pull_request: 
    types: [opened, synchronize, reopened, labeled, unlabeled]

concurrency:
  group: backend-${{ github.ref }}-${{ github.event_name == 'push' || github.event.inputs.fire != null }}
  cancel-in-progress: true

env:
  NODE_OPTIONS: "--max-old-space-size=4096"
  HF_TOKEN: ${{ secrets.HF_TOKEN }}

jobs:
  changes:
    name: "changes"
    runs-on: ubuntu-latest
    outputs:
      should_run: ${{ steps.changes.outputs.should_run }}
      sha: ${{ steps.changes.outputs.sha }}
      pr_number: ${{ steps.changes.outputs.pr_number }}
      source_branch: ${{ steps.changes.outputs.source_branch }}
      source_repo: ${{ steps.changes.outputs.source_repo }}
    steps:
      - uses: actions/checkout@v3
      - uses: pngwn/api-check-test/.github/actions/changes@main
        id: changes
        with:
          type: "gradio"
          token: ${{ secrets.GITHUB_TOKEN }}
  test:
    needs: [changes]
    if: needs.changes.outputs.should_run == 'true'
    strategy:
      matrix:
        os: ["ubuntu-latest", "windows-latest"]
        test-type: ["not flaky", "flaky"]
        exclude:
          - os: ${{ github.event_name == 'pull_request' && contains( github.event.pull_request.labels.*.name, 'windows-tests') && 'dummy' || 'windows-latest' }}
          - test-type: ${{ github.event_name == 'pull_request' && contains( github.event.pull_request.labels.*.name, 'flaky-tests') && 'dummy' || 'flaky' }}
    runs-on: ${{ matrix.os }}
    continue-on-error: true
    steps:
    - uses: actions/checkout@v3
    - name: install dependencies
      id: install_deps
      uses: "./.github/actions/install-all-deps"
      with:
        python_version: "3.8"
        os: ${{ matrix.os }}
        test: true
    - name: log venv activate
      run: echo "venv_activate=${{ steps.install_deps.outputs.venv_activate }}"
    - name: Lint
      if: runner.os == 'Linux'
      run: |
        . venv/bin/activate
        bash scripts/lint_backend.sh
    - name: Typecheck
      if: runner.os == 'Linux'
      run: |
        . venv/bin/activate
        bash scripts/type_check_backend.sh
    - name: Run tests
      run: |
        . ${{steps.install_deps.outputs.venv_activate}}
        python -m pytest -m "${{ matrix.test-type }}"
