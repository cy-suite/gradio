# Theming
Tags: THEMES

## Introduction

Gradio features a built-in theming engine that lets you customize the look and feel of your app. You can choose from a variety of themes, or create your own. To do so, pass the `theme=` kwarg to the `Blocks` or `Interface` constructor. For example:

```python
with gr.Blocks(theme=gr.themes.Glass()):
    ...
```

Gradio comes with a set of prebuilt themes which you can load from `gr.themes.*`. Each of these themes set values for hundreds of CSS variables.

You can use prebuilt themes as a starting point for your own custom themes, or you can create your own themes from scratch. Let's take a look at each approach.

## Extending Themes via the Constructor

Although each theme has hundreds of CSS variables, the values for most these variables are drawn from 8 core variables which can be set through the constructor of each prebuilt theme. Modifying these 8 arguments allows you to quickly change the look and feel of your app.

### Core Colors

The first 3 constructor arguments set the colors of the theme and are gradio.themes.Color objects. Internally, these Color objects hold brightness values for the palette of a single hue, ranging from 50, 100, 200..., 800, 900, 950. Other CSS variables are derived from these 3 colors.

The 3 color constructor arguments are:

- `primary_hue`: This is the color draws attention in your theme. In the default theme, this is set to `gradio.themes.Orange`.
- `secondary_hue`: This is the color that is used for secondary elements in your theme. In the default theme, this is set to `gradio.themes.Blue`.
- `neutral_hue`: This is the color that is used for text and other neutral elements in your theme. In the default theme, this is set to `gradio.themes.Gray`.

You could modify these values using their string shortcuts, such as

```python
with gr.Blocks(theme=gr.themes.Default(primary_hue="red", secondary_hue="pink")):
    ...
```

or you could use the `Color` object directly, such as

```python
with gr.Blocks(theme=gr.themes.Default(primary_hue=gr.themes.Red, secondary_hue=gr.themes.Pink)):
    ...
```
You could also create your own custom `Color` objects and pass them in.

### Core Sizing

The next 3 constructor arguments set the sizing of the theme and are gradio.themes.Size objects. Internally, these Size objects hold pixel size values that range from `xxs` to `xxl`. Other CSS variables are derived from these 3 sizes.

- `spacing_size`: This sets the padding within and spacing between elements. In the default theme, this is set to `gradio.themes.spacing_md`.
- `radius_size`: This sets the roundedness of corners of elements. In the default theme, this is set to `gradio.themes.radius_md`.
- `text_size`: This sets the font size of text. In the default theme, this is set to `gradio.themes.font_md`.

You could modify these values using their string shortcuts, such as

```python
with gr.Blocks(theme=gr.themes.Default(spacing_size="sm", radius_size="lg")):
    ...
```

or you could use the `Size` object directly, such as

```python
with gr.Blocks(theme=gr.themes.Default(spacing_size=gr.themes.spacing_sm, radius_size=gr.themes.radius_lg)):
    ...
```

You could also create your own custom `Size` objects and pass them in.

### Core Fonts

The final 2 constructor arguments set the fonts of the theme. You can pass a list of fonts to each of these arguments to specify fallbacks. If you provide a string, it will be loaded as a system font. If you provide a `gradio.themes.GoogleFont`, the font will be loaded from Google Fonts.

- `font`: This sets the primary font of the theme. In the default theme, this is set to `gradio.themes.GoogleFont("Source Sans Pro")`.
- `font_mono`: This sets the monospace font of the theme. In the default theme, this is set to `gradio.themes.GoogleFont("IBM Plex Mono")`.

You could modify these values such as the following:

```python
with gr.Blocks(theme=gr.themes.Default(font=[gr.themes.GoogleFont("Roboto"), "Arial", "sans-serif"])):
    ...
```

## Extending Themes via `.set()`

You can also modify the values of CSS variables after the theme has been loaded. To do so, use the `.set()` method of the theme object to get access to the CSS variables. For example:

```python
theme = gr.themes.Default(primary_color="blue").set(
    loader_color="#FF0000",
    slider_color="#FF0000",
)

with gr.Blocks(theme=theme):
    ...
```

In the example above, we've set the `loader_color` and `slider_color` variables to `#FF0000`, despite the overall `primary_color` using the blue color palette. You can set any CSS variable that is defined in the theme in this manner. 

Your IDE type hinting should help you navigate these variables. Since there are so many CSS variables, let's take a look at how these variables are named and organized.

### CSS Variable Naming Conventions

CSS variable names can get quite long, like `button_primary_background_hover_dark`! However they follow a common naming convention that makes it easy to understand what they do and to find the variable you're looking for. Seperated by underscores, the variable name is made up of:

1. The target element, such as `button`, `slider`, or `block`.
2. The target element type or sub-element, such as `button_primary`, or `block_label`.
3. The property, such as `button_primary_background`, or `block_label_border_width`.
4. Any relevant state, such as `button_primary_background_hover`.
5. If the value is different in dark mode, the suffix `_dark`. For example, `input_border_color_focus_dark`.

Of course, many CSS variable names are shorter than this, such as `table_border_color`, or `input_shadow`. 

### CSS Variable Organization

Though there are hundreds of CSS variables, they do not all have to have individual values. They draw their values by referencing a set of core variables and referencing each other. This allows us to only have to modify a few variables to change the look and feel of the entire theme, while also getting finer control of individual elements that we may want to modify.

#### Referencing Core Variables

To reference one of the core constructor variables, precede the variable name with an asterisk. To reference a core color, use the `*primary_`, `*secondary_`, or `*neutral_` prefix, followed by the brightness value. For example:

```python
theme = gr.themes.Default(primary_color="blue").set(
    button_primary_background="*primary_200",
    button_primary_background_hover="*primary_300",
)
```

In the example above, we've set the `button_primary_background` and `button_primary_background_hover` variables to `*primary_200` and `*primary_300`. These variables will be set to the 200 and 300 brightness values of the blue primary color palette, respectively.

Similarly, to reference a core size, use the `*spacing_`, `*radius_`, or `*text_` prefix, followed by the size value. For example:

```python
theme = gr.themes.Default(radius_size="md").set(
    button_primary_border_radius="*radius_xl",
)
```

In the example above, we've set the `button_primary_border_radius` variable to `*radius_xl`. This variable will be set to the `xl` setting of the medium radius size range.

#### Referencing Other Variables

Variables can also reference each other. For example, look at the example below:

```python
theme = gr.themes.Default().set(
    button_primary_background="#FF0000",
    button_primary_background_hover="#FF0000",
    button_primary_border="#FF0000",
)
```

Having to set these values to a common color is a bit tedious. Instead, we can reference the `button_primary_background` variable in the `button_primary_background_hover` and `button_primary_border` variables, using a `*` prefix. 

```python
theme = gr.themes.Default().set(
    button_primary_background="#FF0000",
    button_primary_background_hover="*button_primary_background",
    button_primary_border="*button_primary_background",
)
```

Now, if we change the `button_primary_background` variable, the `button_primary_background_hover` and `button_primary_border` variables will automatically update as well.

This is particularly useful if you intend to share your theme - it makes it easy to modify the theme without having to change every variable.

Note that dark mode variables automatically reference each other. For example:

```python
theme = gr.themes.Default().set(
    button_primary_background="#FF0000",
    button_primary_background_dark="#AAAAAA",
    button_primary_border="*button_primary_background",
    button_primary_border_dark="*button_primary_background",
)
```

`button_primary_border_dark` will draw its value from `button_primary_background_dark`, because dark mode always draw from the dark version of the variable.

## Creating a Full Theme

Let's say you want to create a theme from scratch! We'll go through it step by step - you can also see the source of prebuilt themes in the gradio source repo for reference - [here's the source](https://github.com/gradio-app/gradio/blob/main/gradio/themes/monochrome.py) for the Monochrome theme.

Our new theme class will inherit from `gradio.themes.Base`, a theme that sets a lot of convenient defaults. We'll start by override the constructor. Let's we'll pass use the same constructor arguments, but change the defaults. Let's go for a green and blue colored theme. We'll keep the sizes of everything medium, and use the "Roboto" font from Google Fonts.

```python
from __future__ import annotations
from typing import Iterable
from gradio.themes.base import Base
from gradio.themes.utils import colors, fonts, sizes


class EmeraldBlue(Base):
    def __init__(
        self,
        *,
        primary_hue: colors.Color | str = colors.green,
        secondary_hue: colors.Color | str = colors.blue,
        neutral_hue: colors.Color | str = colors.gray,
        spacing_size: sizes.Size | str = sizes.spacing_md,
        radius_size: sizes.Size | str = sizes.radius_md,
        text_size: sizes.Size | str = sizes.text_md,
        font: fonts.Font
        | str
        | Iterable[fonts.Font | str] = (
            fonts.GoogleFont("Roboto"),
            "ui-sans-serif",
            "sans-serif",
        ),
        font_mono: fonts.Font
        | str
        | Iterable[fonts.Font | str] = (
            fonts.GoogleFont("IBM Plex Mono"),
            "ui-monospace",
            "Consolas",
            "monospace",
        ),
    ):
        super().__init__(
            primary_hue=primary_hue,
            secondary_hue=secondary_hue,
            neutral_hue=neutral_hue,
            spacing_size=spacing_size,
            radius_size=radius_size,
            text_size=text_size,
            font=font,
            font_mono=font_mono,
        )
```

We've overridden the constructor to set the default values for the theme. Let's make a simple demo to see what it looks like right now (assume the theme is saved in emerald_blue.py):

```python
import gradio as gr
import EmeraldBlue from emerald_blue

theme = EmeraldBlue()

with gr.Blocks() as demo:
    text = gr.Textbox(label="Name")
    slider = gr.Slider(minimum=0, maximum=5)
    button = gr.Button("Run", variant="primary")    
    output = gr.Textbox(label="Output")
    button2 = gr.Button("Dummy")

    def repeat(text, slider):
        import time
        time.sleep(1)
        return text * slider

    button.click(repeat, [text, slider], output)
demo.launch()
```

See how to the primary button already responds to the primary color. Also when you run the app, you'll see that the loader has also picked up the green primary color. This is because the properties `button_primary_background` and `loader_color` variables are tied to the `primary_hue` variable. Note also the app is using the `Roboto` font loaded from Google Fonts.

Let's override the primary button color as well as the background color of the app. We'll continue the constructor code as follows:

```python
    def __init__(...)
        # code from above
        self.set(
            body_background="*primary_50",
            body_background_dark="*primary_900",
            button_primary_background="linear-gradient(90deg, *primary_200, *secondary_300)",
            button_primary_background_dark="linear-gradient(90deg, *primary_600, *secondary_800)",
        )
```

See how we've set the `body_background` and `body_background_dark` variables to the 50 and 900 brightness values of the primary color in light mode vs dark mode. We've also set the `button_primary_background` and `button_primary_background_dark` variables to a linear gradient of the primary color and secondary color. These colors respond to the primary and secondary colors of the theme, so if another user passes different primary or secondary hues, the theme will update accordingly.
