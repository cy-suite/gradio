import nbformat as nbf
import os 

GRADIO_DEMO_DIR = os.getcwd()
DEMOS_TO_SKIP = {"all_demos", "reset_components", "custom_path", "kitchen_sink_random"}

demos = os.listdir(GRADIO_DEMO_DIR)
demos = [demo for demo in demos if demo not in DEMOS_TO_SKIP and os.path.isdir(os.path.join(GRADIO_DEMO_DIR, demo)) and  os.path.exists(os.path.join(GRADIO_DEMO_DIR, demo, "run.py"))]

for demo in demos: 
    nb = nbf.v4.new_notebook()
    text = f"# Gradio Demo: {demo}"

    if os.path.exists(os.path.join(GRADIO_DEMO_DIR, demo, "DESCRIPTION.md")):
        with open(os.path.join(GRADIO_DEMO_DIR, demo, "DESCRIPTION.md"), "r") as f:
            description = f.read()
        text += f"""\n### {description}
        """

    text += f"\n\n\n#### THIS NOTEBOOK IS AUTOGENERATED. DO NOT EDIT THIS FILE DIRECTLY: Edit the corresponding run.py file in the `gradio/demo` directory and run `python generate_notebooks.py` to regenerate this notebook."

    requirements = ""
    if os.path.exists(os.path.join(GRADIO_DEMO_DIR, demo, "requirements.txt")):
        with open(os.path.join(GRADIO_DEMO_DIR, demo, "requirements.txt"), "r") as f:
            requirements = f.read().split("\n")
        requirements = " ".join(requirements)

    installs = f"!pip install -q gradio {requirements}"

    with open(os.path.join(GRADIO_DEMO_DIR, demo, "run.py"), "r") as f:
        code = f.read()
    
    nb['cells'] = [nbf.v4.new_markdown_cell(text),
                nbf.v4.new_code_cell(installs),
                nbf.v4.new_code_cell(code)]
    
    output_notebook = os.path.join(GRADIO_DEMO_DIR, demo, "run.ipynb")

    with open(output_notebook, 'w') as f:
        nbf.write(nb, f)